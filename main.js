/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/

var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// main.ts
var main_exports = {};
__export(main_exports, {
  default: () => AiNotes
});
module.exports = __toCommonJS(main_exports);
var import_obsidian = require("obsidian");

// node_modules/@google/generative-ai/dist/index.mjs
var SchemaType;
(function(SchemaType2) {
  SchemaType2["STRING"] = "string";
  SchemaType2["NUMBER"] = "number";
  SchemaType2["INTEGER"] = "integer";
  SchemaType2["BOOLEAN"] = "boolean";
  SchemaType2["ARRAY"] = "array";
  SchemaType2["OBJECT"] = "object";
})(SchemaType || (SchemaType = {}));
var ExecutableCodeLanguage;
(function(ExecutableCodeLanguage2) {
  ExecutableCodeLanguage2["LANGUAGE_UNSPECIFIED"] = "language_unspecified";
  ExecutableCodeLanguage2["PYTHON"] = "python";
})(ExecutableCodeLanguage || (ExecutableCodeLanguage = {}));
var Outcome;
(function(Outcome2) {
  Outcome2["OUTCOME_UNSPECIFIED"] = "outcome_unspecified";
  Outcome2["OUTCOME_OK"] = "outcome_ok";
  Outcome2["OUTCOME_FAILED"] = "outcome_failed";
  Outcome2["OUTCOME_DEADLINE_EXCEEDED"] = "outcome_deadline_exceeded";
})(Outcome || (Outcome = {}));
var POSSIBLE_ROLES = ["user", "model", "function", "system"];
var HarmCategory;
(function(HarmCategory2) {
  HarmCategory2["HARM_CATEGORY_UNSPECIFIED"] = "HARM_CATEGORY_UNSPECIFIED";
  HarmCategory2["HARM_CATEGORY_HATE_SPEECH"] = "HARM_CATEGORY_HATE_SPEECH";
  HarmCategory2["HARM_CATEGORY_SEXUALLY_EXPLICIT"] = "HARM_CATEGORY_SEXUALLY_EXPLICIT";
  HarmCategory2["HARM_CATEGORY_HARASSMENT"] = "HARM_CATEGORY_HARASSMENT";
  HarmCategory2["HARM_CATEGORY_DANGEROUS_CONTENT"] = "HARM_CATEGORY_DANGEROUS_CONTENT";
  HarmCategory2["HARM_CATEGORY_CIVIC_INTEGRITY"] = "HARM_CATEGORY_CIVIC_INTEGRITY";
})(HarmCategory || (HarmCategory = {}));
var HarmBlockThreshold;
(function(HarmBlockThreshold2) {
  HarmBlockThreshold2["HARM_BLOCK_THRESHOLD_UNSPECIFIED"] = "HARM_BLOCK_THRESHOLD_UNSPECIFIED";
  HarmBlockThreshold2["BLOCK_LOW_AND_ABOVE"] = "BLOCK_LOW_AND_ABOVE";
  HarmBlockThreshold2["BLOCK_MEDIUM_AND_ABOVE"] = "BLOCK_MEDIUM_AND_ABOVE";
  HarmBlockThreshold2["BLOCK_ONLY_HIGH"] = "BLOCK_ONLY_HIGH";
  HarmBlockThreshold2["BLOCK_NONE"] = "BLOCK_NONE";
})(HarmBlockThreshold || (HarmBlockThreshold = {}));
var HarmProbability;
(function(HarmProbability2) {
  HarmProbability2["HARM_PROBABILITY_UNSPECIFIED"] = "HARM_PROBABILITY_UNSPECIFIED";
  HarmProbability2["NEGLIGIBLE"] = "NEGLIGIBLE";
  HarmProbability2["LOW"] = "LOW";
  HarmProbability2["MEDIUM"] = "MEDIUM";
  HarmProbability2["HIGH"] = "HIGH";
})(HarmProbability || (HarmProbability = {}));
var BlockReason;
(function(BlockReason2) {
  BlockReason2["BLOCKED_REASON_UNSPECIFIED"] = "BLOCKED_REASON_UNSPECIFIED";
  BlockReason2["SAFETY"] = "SAFETY";
  BlockReason2["OTHER"] = "OTHER";
})(BlockReason || (BlockReason = {}));
var FinishReason;
(function(FinishReason2) {
  FinishReason2["FINISH_REASON_UNSPECIFIED"] = "FINISH_REASON_UNSPECIFIED";
  FinishReason2["STOP"] = "STOP";
  FinishReason2["MAX_TOKENS"] = "MAX_TOKENS";
  FinishReason2["SAFETY"] = "SAFETY";
  FinishReason2["RECITATION"] = "RECITATION";
  FinishReason2["LANGUAGE"] = "LANGUAGE";
  FinishReason2["BLOCKLIST"] = "BLOCKLIST";
  FinishReason2["PROHIBITED_CONTENT"] = "PROHIBITED_CONTENT";
  FinishReason2["SPII"] = "SPII";
  FinishReason2["MALFORMED_FUNCTION_CALL"] = "MALFORMED_FUNCTION_CALL";
  FinishReason2["OTHER"] = "OTHER";
})(FinishReason || (FinishReason = {}));
var TaskType;
(function(TaskType2) {
  TaskType2["TASK_TYPE_UNSPECIFIED"] = "TASK_TYPE_UNSPECIFIED";
  TaskType2["RETRIEVAL_QUERY"] = "RETRIEVAL_QUERY";
  TaskType2["RETRIEVAL_DOCUMENT"] = "RETRIEVAL_DOCUMENT";
  TaskType2["SEMANTIC_SIMILARITY"] = "SEMANTIC_SIMILARITY";
  TaskType2["CLASSIFICATION"] = "CLASSIFICATION";
  TaskType2["CLUSTERING"] = "CLUSTERING";
})(TaskType || (TaskType = {}));
var FunctionCallingMode;
(function(FunctionCallingMode2) {
  FunctionCallingMode2["MODE_UNSPECIFIED"] = "MODE_UNSPECIFIED";
  FunctionCallingMode2["AUTO"] = "AUTO";
  FunctionCallingMode2["ANY"] = "ANY";
  FunctionCallingMode2["NONE"] = "NONE";
})(FunctionCallingMode || (FunctionCallingMode = {}));
var DynamicRetrievalMode;
(function(DynamicRetrievalMode2) {
  DynamicRetrievalMode2["MODE_UNSPECIFIED"] = "MODE_UNSPECIFIED";
  DynamicRetrievalMode2["MODE_DYNAMIC"] = "MODE_DYNAMIC";
})(DynamicRetrievalMode || (DynamicRetrievalMode = {}));
var GoogleGenerativeAIError = class extends Error {
  constructor(message) {
    super(`[GoogleGenerativeAI Error]: ${message}`);
  }
};
var GoogleGenerativeAIResponseError = class extends GoogleGenerativeAIError {
  constructor(message, response) {
    super(message);
    this.response = response;
  }
};
var GoogleGenerativeAIFetchError = class extends GoogleGenerativeAIError {
  constructor(message, status, statusText, errorDetails) {
    super(message);
    this.status = status;
    this.statusText = statusText;
    this.errorDetails = errorDetails;
  }
};
var GoogleGenerativeAIRequestInputError = class extends GoogleGenerativeAIError {
};
var GoogleGenerativeAIAbortError = class extends GoogleGenerativeAIError {
};
var DEFAULT_BASE_URL = "https://generativelanguage.googleapis.com";
var DEFAULT_API_VERSION = "v1beta";
var PACKAGE_VERSION = "0.24.1";
var PACKAGE_LOG_HEADER = "genai-js";
var Task;
(function(Task2) {
  Task2["GENERATE_CONTENT"] = "generateContent";
  Task2["STREAM_GENERATE_CONTENT"] = "streamGenerateContent";
  Task2["COUNT_TOKENS"] = "countTokens";
  Task2["EMBED_CONTENT"] = "embedContent";
  Task2["BATCH_EMBED_CONTENTS"] = "batchEmbedContents";
})(Task || (Task = {}));
var RequestUrl = class {
  constructor(model, task, apiKey, stream, requestOptions) {
    this.model = model;
    this.task = task;
    this.apiKey = apiKey;
    this.stream = stream;
    this.requestOptions = requestOptions;
  }
  toString() {
    var _a, _b;
    const apiVersion = ((_a = this.requestOptions) === null || _a === void 0 ? void 0 : _a.apiVersion) || DEFAULT_API_VERSION;
    const baseUrl = ((_b = this.requestOptions) === null || _b === void 0 ? void 0 : _b.baseUrl) || DEFAULT_BASE_URL;
    let url = `${baseUrl}/${apiVersion}/${this.model}:${this.task}`;
    if (this.stream) {
      url += "?alt=sse";
    }
    return url;
  }
};
function getClientHeaders(requestOptions) {
  const clientHeaders = [];
  if (requestOptions === null || requestOptions === void 0 ? void 0 : requestOptions.apiClient) {
    clientHeaders.push(requestOptions.apiClient);
  }
  clientHeaders.push(`${PACKAGE_LOG_HEADER}/${PACKAGE_VERSION}`);
  return clientHeaders.join(" ");
}
async function getHeaders(url) {
  var _a;
  const headers = new Headers();
  headers.append("Content-Type", "application/json");
  headers.append("x-goog-api-client", getClientHeaders(url.requestOptions));
  headers.append("x-goog-api-key", url.apiKey);
  let customHeaders = (_a = url.requestOptions) === null || _a === void 0 ? void 0 : _a.customHeaders;
  if (customHeaders) {
    if (!(customHeaders instanceof Headers)) {
      try {
        customHeaders = new Headers(customHeaders);
      } catch (e) {
        throw new GoogleGenerativeAIRequestInputError(`unable to convert customHeaders value ${JSON.stringify(customHeaders)} to Headers: ${e.message}`);
      }
    }
    for (const [headerName, headerValue] of customHeaders.entries()) {
      if (headerName === "x-goog-api-key") {
        throw new GoogleGenerativeAIRequestInputError(`Cannot set reserved header name ${headerName}`);
      } else if (headerName === "x-goog-api-client") {
        throw new GoogleGenerativeAIRequestInputError(`Header name ${headerName} can only be set using the apiClient field`);
      }
      headers.append(headerName, headerValue);
    }
  }
  return headers;
}
async function constructModelRequest(model, task, apiKey, stream, body, requestOptions) {
  const url = new RequestUrl(model, task, apiKey, stream, requestOptions);
  return {
    url: url.toString(),
    fetchOptions: Object.assign(Object.assign({}, buildFetchOptions(requestOptions)), { method: "POST", headers: await getHeaders(url), body })
  };
}
async function makeModelRequest(model, task, apiKey, stream, body, requestOptions = {}, fetchFn = fetch) {
  const { url, fetchOptions } = await constructModelRequest(model, task, apiKey, stream, body, requestOptions);
  return makeRequest(url, fetchOptions, fetchFn);
}
async function makeRequest(url, fetchOptions, fetchFn = fetch) {
  let response;
  try {
    response = await fetchFn(url, fetchOptions);
  } catch (e) {
    handleResponseError(e, url);
  }
  if (!response.ok) {
    await handleResponseNotOk(response, url);
  }
  return response;
}
function handleResponseError(e, url) {
  let err = e;
  if (err.name === "AbortError") {
    err = new GoogleGenerativeAIAbortError(`Request aborted when fetching ${url.toString()}: ${e.message}`);
    err.stack = e.stack;
  } else if (!(e instanceof GoogleGenerativeAIFetchError || e instanceof GoogleGenerativeAIRequestInputError)) {
    err = new GoogleGenerativeAIError(`Error fetching from ${url.toString()}: ${e.message}`);
    err.stack = e.stack;
  }
  throw err;
}
async function handleResponseNotOk(response, url) {
  let message = "";
  let errorDetails;
  try {
    const json = await response.json();
    message = json.error.message;
    if (json.error.details) {
      message += ` ${JSON.stringify(json.error.details)}`;
      errorDetails = json.error.details;
    }
  } catch (e) {
  }
  throw new GoogleGenerativeAIFetchError(`Error fetching from ${url.toString()}: [${response.status} ${response.statusText}] ${message}`, response.status, response.statusText, errorDetails);
}
function buildFetchOptions(requestOptions) {
  const fetchOptions = {};
  if ((requestOptions === null || requestOptions === void 0 ? void 0 : requestOptions.signal) !== void 0 || (requestOptions === null || requestOptions === void 0 ? void 0 : requestOptions.timeout) >= 0) {
    const controller = new AbortController();
    if ((requestOptions === null || requestOptions === void 0 ? void 0 : requestOptions.timeout) >= 0) {
      setTimeout(() => controller.abort(), requestOptions.timeout);
    }
    if (requestOptions === null || requestOptions === void 0 ? void 0 : requestOptions.signal) {
      requestOptions.signal.addEventListener("abort", () => {
        controller.abort();
      });
    }
    fetchOptions.signal = controller.signal;
  }
  return fetchOptions;
}
function addHelpers(response) {
  response.text = () => {
    if (response.candidates && response.candidates.length > 0) {
      if (response.candidates.length > 1) {
        console.warn(`This response had ${response.candidates.length} candidates. Returning text from the first candidate only. Access response.candidates directly to use the other candidates.`);
      }
      if (hadBadFinishReason(response.candidates[0])) {
        throw new GoogleGenerativeAIResponseError(`${formatBlockErrorMessage(response)}`, response);
      }
      return getText(response);
    } else if (response.promptFeedback) {
      throw new GoogleGenerativeAIResponseError(`Text not available. ${formatBlockErrorMessage(response)}`, response);
    }
    return "";
  };
  response.functionCall = () => {
    if (response.candidates && response.candidates.length > 0) {
      if (response.candidates.length > 1) {
        console.warn(`This response had ${response.candidates.length} candidates. Returning function calls from the first candidate only. Access response.candidates directly to use the other candidates.`);
      }
      if (hadBadFinishReason(response.candidates[0])) {
        throw new GoogleGenerativeAIResponseError(`${formatBlockErrorMessage(response)}`, response);
      }
      console.warn(`response.functionCall() is deprecated. Use response.functionCalls() instead.`);
      return getFunctionCalls(response)[0];
    } else if (response.promptFeedback) {
      throw new GoogleGenerativeAIResponseError(`Function call not available. ${formatBlockErrorMessage(response)}`, response);
    }
    return void 0;
  };
  response.functionCalls = () => {
    if (response.candidates && response.candidates.length > 0) {
      if (response.candidates.length > 1) {
        console.warn(`This response had ${response.candidates.length} candidates. Returning function calls from the first candidate only. Access response.candidates directly to use the other candidates.`);
      }
      if (hadBadFinishReason(response.candidates[0])) {
        throw new GoogleGenerativeAIResponseError(`${formatBlockErrorMessage(response)}`, response);
      }
      return getFunctionCalls(response);
    } else if (response.promptFeedback) {
      throw new GoogleGenerativeAIResponseError(`Function call not available. ${formatBlockErrorMessage(response)}`, response);
    }
    return void 0;
  };
  return response;
}
function getText(response) {
  var _a, _b, _c, _d;
  const textStrings = [];
  if ((_b = (_a = response.candidates) === null || _a === void 0 ? void 0 : _a[0].content) === null || _b === void 0 ? void 0 : _b.parts) {
    for (const part of (_d = (_c = response.candidates) === null || _c === void 0 ? void 0 : _c[0].content) === null || _d === void 0 ? void 0 : _d.parts) {
      if (part.text) {
        textStrings.push(part.text);
      }
      if (part.executableCode) {
        textStrings.push("\n```" + part.executableCode.language + "\n" + part.executableCode.code + "\n```\n");
      }
      if (part.codeExecutionResult) {
        textStrings.push("\n```\n" + part.codeExecutionResult.output + "\n```\n");
      }
    }
  }
  if (textStrings.length > 0) {
    return textStrings.join("");
  } else {
    return "";
  }
}
function getFunctionCalls(response) {
  var _a, _b, _c, _d;
  const functionCalls = [];
  if ((_b = (_a = response.candidates) === null || _a === void 0 ? void 0 : _a[0].content) === null || _b === void 0 ? void 0 : _b.parts) {
    for (const part of (_d = (_c = response.candidates) === null || _c === void 0 ? void 0 : _c[0].content) === null || _d === void 0 ? void 0 : _d.parts) {
      if (part.functionCall) {
        functionCalls.push(part.functionCall);
      }
    }
  }
  if (functionCalls.length > 0) {
    return functionCalls;
  } else {
    return void 0;
  }
}
var badFinishReasons = [
  FinishReason.RECITATION,
  FinishReason.SAFETY,
  FinishReason.LANGUAGE
];
function hadBadFinishReason(candidate) {
  return !!candidate.finishReason && badFinishReasons.includes(candidate.finishReason);
}
function formatBlockErrorMessage(response) {
  var _a, _b, _c;
  let message = "";
  if ((!response.candidates || response.candidates.length === 0) && response.promptFeedback) {
    message += "Response was blocked";
    if ((_a = response.promptFeedback) === null || _a === void 0 ? void 0 : _a.blockReason) {
      message += ` due to ${response.promptFeedback.blockReason}`;
    }
    if ((_b = response.promptFeedback) === null || _b === void 0 ? void 0 : _b.blockReasonMessage) {
      message += `: ${response.promptFeedback.blockReasonMessage}`;
    }
  } else if ((_c = response.candidates) === null || _c === void 0 ? void 0 : _c[0]) {
    const firstCandidate = response.candidates[0];
    if (hadBadFinishReason(firstCandidate)) {
      message += `Candidate was blocked due to ${firstCandidate.finishReason}`;
      if (firstCandidate.finishMessage) {
        message += `: ${firstCandidate.finishMessage}`;
      }
    }
  }
  return message;
}
function __await(v) {
  return this instanceof __await ? (this.v = v, this) : new __await(v);
}
function __asyncGenerator(thisArg, _arguments, generator) {
  if (!Symbol.asyncIterator)
    throw new TypeError("Symbol.asyncIterator is not defined.");
  var g = generator.apply(thisArg, _arguments || []), i, q = [];
  return i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function() {
    return this;
  }, i;
  function verb(n) {
    if (g[n])
      i[n] = function(v) {
        return new Promise(function(a, b) {
          q.push([n, v, a, b]) > 1 || resume(n, v);
        });
      };
  }
  function resume(n, v) {
    try {
      step(g[n](v));
    } catch (e) {
      settle(q[0][3], e);
    }
  }
  function step(r) {
    r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r);
  }
  function fulfill(value) {
    resume("next", value);
  }
  function reject(value) {
    resume("throw", value);
  }
  function settle(f, v) {
    if (f(v), q.shift(), q.length)
      resume(q[0][0], q[0][1]);
  }
}
var responseLineRE = /^data\: (.*)(?:\n\n|\r\r|\r\n\r\n)/;
function processStream(response) {
  const inputStream = response.body.pipeThrough(new TextDecoderStream("utf8", { fatal: true }));
  const responseStream = getResponseStream(inputStream);
  const [stream1, stream2] = responseStream.tee();
  return {
    stream: generateResponseSequence(stream1),
    response: getResponsePromise(stream2)
  };
}
async function getResponsePromise(stream) {
  const allResponses = [];
  const reader = stream.getReader();
  while (true) {
    const { done, value } = await reader.read();
    if (done) {
      return addHelpers(aggregateResponses(allResponses));
    }
    allResponses.push(value);
  }
}
function generateResponseSequence(stream) {
  return __asyncGenerator(this, arguments, function* generateResponseSequence_1() {
    const reader = stream.getReader();
    while (true) {
      const { value, done } = yield __await(reader.read());
      if (done) {
        break;
      }
      yield yield __await(addHelpers(value));
    }
  });
}
function getResponseStream(inputStream) {
  const reader = inputStream.getReader();
  const stream = new ReadableStream({
    start(controller) {
      let currentText = "";
      return pump();
      function pump() {
        return reader.read().then(({ value, done }) => {
          if (done) {
            if (currentText.trim()) {
              controller.error(new GoogleGenerativeAIError("Failed to parse stream"));
              return;
            }
            controller.close();
            return;
          }
          currentText += value;
          let match = currentText.match(responseLineRE);
          let parsedResponse;
          while (match) {
            try {
              parsedResponse = JSON.parse(match[1]);
            } catch (e) {
              controller.error(new GoogleGenerativeAIError(`Error parsing JSON response: "${match[1]}"`));
              return;
            }
            controller.enqueue(parsedResponse);
            currentText = currentText.substring(match[0].length);
            match = currentText.match(responseLineRE);
          }
          return pump();
        }).catch((e) => {
          let err = e;
          err.stack = e.stack;
          if (err.name === "AbortError") {
            err = new GoogleGenerativeAIAbortError("Request aborted when reading from the stream");
          } else {
            err = new GoogleGenerativeAIError("Error reading from the stream");
          }
          throw err;
        });
      }
    }
  });
  return stream;
}
function aggregateResponses(responses) {
  const lastResponse = responses[responses.length - 1];
  const aggregatedResponse = {
    promptFeedback: lastResponse === null || lastResponse === void 0 ? void 0 : lastResponse.promptFeedback
  };
  for (const response of responses) {
    if (response.candidates) {
      let candidateIndex = 0;
      for (const candidate of response.candidates) {
        if (!aggregatedResponse.candidates) {
          aggregatedResponse.candidates = [];
        }
        if (!aggregatedResponse.candidates[candidateIndex]) {
          aggregatedResponse.candidates[candidateIndex] = {
            index: candidateIndex
          };
        }
        aggregatedResponse.candidates[candidateIndex].citationMetadata = candidate.citationMetadata;
        aggregatedResponse.candidates[candidateIndex].groundingMetadata = candidate.groundingMetadata;
        aggregatedResponse.candidates[candidateIndex].finishReason = candidate.finishReason;
        aggregatedResponse.candidates[candidateIndex].finishMessage = candidate.finishMessage;
        aggregatedResponse.candidates[candidateIndex].safetyRatings = candidate.safetyRatings;
        if (candidate.content && candidate.content.parts) {
          if (!aggregatedResponse.candidates[candidateIndex].content) {
            aggregatedResponse.candidates[candidateIndex].content = {
              role: candidate.content.role || "user",
              parts: []
            };
          }
          const newPart = {};
          for (const part of candidate.content.parts) {
            if (part.text) {
              newPart.text = part.text;
            }
            if (part.functionCall) {
              newPart.functionCall = part.functionCall;
            }
            if (part.executableCode) {
              newPart.executableCode = part.executableCode;
            }
            if (part.codeExecutionResult) {
              newPart.codeExecutionResult = part.codeExecutionResult;
            }
            if (Object.keys(newPart).length === 0) {
              newPart.text = "";
            }
            aggregatedResponse.candidates[candidateIndex].content.parts.push(newPart);
          }
        }
      }
      candidateIndex++;
    }
    if (response.usageMetadata) {
      aggregatedResponse.usageMetadata = response.usageMetadata;
    }
  }
  return aggregatedResponse;
}
async function generateContentStream(apiKey, model, params, requestOptions) {
  const response = await makeModelRequest(
    model,
    Task.STREAM_GENERATE_CONTENT,
    apiKey,
    /* stream */
    true,
    JSON.stringify(params),
    requestOptions
  );
  return processStream(response);
}
async function generateContent(apiKey, model, params, requestOptions) {
  const response = await makeModelRequest(
    model,
    Task.GENERATE_CONTENT,
    apiKey,
    /* stream */
    false,
    JSON.stringify(params),
    requestOptions
  );
  const responseJson = await response.json();
  const enhancedResponse = addHelpers(responseJson);
  return {
    response: enhancedResponse
  };
}
function formatSystemInstruction(input) {
  if (input == null) {
    return void 0;
  } else if (typeof input === "string") {
    return { role: "system", parts: [{ text: input }] };
  } else if (input.text) {
    return { role: "system", parts: [input] };
  } else if (input.parts) {
    if (!input.role) {
      return { role: "system", parts: input.parts };
    } else {
      return input;
    }
  }
}
function formatNewContent(request) {
  let newParts = [];
  if (typeof request === "string") {
    newParts = [{ text: request }];
  } else {
    for (const partOrString of request) {
      if (typeof partOrString === "string") {
        newParts.push({ text: partOrString });
      } else {
        newParts.push(partOrString);
      }
    }
  }
  return assignRoleToPartsAndValidateSendMessageRequest(newParts);
}
function assignRoleToPartsAndValidateSendMessageRequest(parts) {
  const userContent = { role: "user", parts: [] };
  const functionContent = { role: "function", parts: [] };
  let hasUserContent = false;
  let hasFunctionContent = false;
  for (const part of parts) {
    if ("functionResponse" in part) {
      functionContent.parts.push(part);
      hasFunctionContent = true;
    } else {
      userContent.parts.push(part);
      hasUserContent = true;
    }
  }
  if (hasUserContent && hasFunctionContent) {
    throw new GoogleGenerativeAIError("Within a single message, FunctionResponse cannot be mixed with other type of part in the request for sending chat message.");
  }
  if (!hasUserContent && !hasFunctionContent) {
    throw new GoogleGenerativeAIError("No content is provided for sending chat message.");
  }
  if (hasUserContent) {
    return userContent;
  }
  return functionContent;
}
function formatCountTokensInput(params, modelParams) {
  var _a;
  let formattedGenerateContentRequest = {
    model: modelParams === null || modelParams === void 0 ? void 0 : modelParams.model,
    generationConfig: modelParams === null || modelParams === void 0 ? void 0 : modelParams.generationConfig,
    safetySettings: modelParams === null || modelParams === void 0 ? void 0 : modelParams.safetySettings,
    tools: modelParams === null || modelParams === void 0 ? void 0 : modelParams.tools,
    toolConfig: modelParams === null || modelParams === void 0 ? void 0 : modelParams.toolConfig,
    systemInstruction: modelParams === null || modelParams === void 0 ? void 0 : modelParams.systemInstruction,
    cachedContent: (_a = modelParams === null || modelParams === void 0 ? void 0 : modelParams.cachedContent) === null || _a === void 0 ? void 0 : _a.name,
    contents: []
  };
  const containsGenerateContentRequest = params.generateContentRequest != null;
  if (params.contents) {
    if (containsGenerateContentRequest) {
      throw new GoogleGenerativeAIRequestInputError("CountTokensRequest must have one of contents or generateContentRequest, not both.");
    }
    formattedGenerateContentRequest.contents = params.contents;
  } else if (containsGenerateContentRequest) {
    formattedGenerateContentRequest = Object.assign(Object.assign({}, formattedGenerateContentRequest), params.generateContentRequest);
  } else {
    const content = formatNewContent(params);
    formattedGenerateContentRequest.contents = [content];
  }
  return { generateContentRequest: formattedGenerateContentRequest };
}
function formatGenerateContentInput(params) {
  let formattedRequest;
  if (params.contents) {
    formattedRequest = params;
  } else {
    const content = formatNewContent(params);
    formattedRequest = { contents: [content] };
  }
  if (params.systemInstruction) {
    formattedRequest.systemInstruction = formatSystemInstruction(params.systemInstruction);
  }
  return formattedRequest;
}
function formatEmbedContentInput(params) {
  if (typeof params === "string" || Array.isArray(params)) {
    const content = formatNewContent(params);
    return { content };
  }
  return params;
}
var VALID_PART_FIELDS = [
  "text",
  "inlineData",
  "functionCall",
  "functionResponse",
  "executableCode",
  "codeExecutionResult"
];
var VALID_PARTS_PER_ROLE = {
  user: ["text", "inlineData"],
  function: ["functionResponse"],
  model: ["text", "functionCall", "executableCode", "codeExecutionResult"],
  // System instructions shouldn't be in history anyway.
  system: ["text"]
};
function validateChatHistory(history) {
  let prevContent = false;
  for (const currContent of history) {
    const { role, parts } = currContent;
    if (!prevContent && role !== "user") {
      throw new GoogleGenerativeAIError(`First content should be with role 'user', got ${role}`);
    }
    if (!POSSIBLE_ROLES.includes(role)) {
      throw new GoogleGenerativeAIError(`Each item should include role field. Got ${role} but valid roles are: ${JSON.stringify(POSSIBLE_ROLES)}`);
    }
    if (!Array.isArray(parts)) {
      throw new GoogleGenerativeAIError("Content should have 'parts' property with an array of Parts");
    }
    if (parts.length === 0) {
      throw new GoogleGenerativeAIError("Each Content should have at least one part");
    }
    const countFields = {
      text: 0,
      inlineData: 0,
      functionCall: 0,
      functionResponse: 0,
      fileData: 0,
      executableCode: 0,
      codeExecutionResult: 0
    };
    for (const part of parts) {
      for (const key of VALID_PART_FIELDS) {
        if (key in part) {
          countFields[key] += 1;
        }
      }
    }
    const validParts = VALID_PARTS_PER_ROLE[role];
    for (const key of VALID_PART_FIELDS) {
      if (!validParts.includes(key) && countFields[key] > 0) {
        throw new GoogleGenerativeAIError(`Content with role '${role}' can't contain '${key}' part`);
      }
    }
    prevContent = true;
  }
}
function isValidResponse(response) {
  var _a;
  if (response.candidates === void 0 || response.candidates.length === 0) {
    return false;
  }
  const content = (_a = response.candidates[0]) === null || _a === void 0 ? void 0 : _a.content;
  if (content === void 0) {
    return false;
  }
  if (content.parts === void 0 || content.parts.length === 0) {
    return false;
  }
  for (const part of content.parts) {
    if (part === void 0 || Object.keys(part).length === 0) {
      return false;
    }
    if (part.text !== void 0 && part.text === "") {
      return false;
    }
  }
  return true;
}
var SILENT_ERROR = "SILENT_ERROR";
var ChatSession = class {
  constructor(apiKey, model, params, _requestOptions = {}) {
    this.model = model;
    this.params = params;
    this._requestOptions = _requestOptions;
    this._history = [];
    this._sendPromise = Promise.resolve();
    this._apiKey = apiKey;
    if (params === null || params === void 0 ? void 0 : params.history) {
      validateChatHistory(params.history);
      this._history = params.history;
    }
  }
  /**
   * Gets the chat history so far. Blocked prompts are not added to history.
   * Blocked candidates are not added to history, nor are the prompts that
   * generated them.
   */
  async getHistory() {
    await this._sendPromise;
    return this._history;
  }
  /**
   * Sends a chat message and receives a non-streaming
   * {@link GenerateContentResult}.
   *
   * Fields set in the optional {@link SingleRequestOptions} parameter will
   * take precedence over the {@link RequestOptions} values provided to
   * {@link GoogleGenerativeAI.getGenerativeModel }.
   */
  async sendMessage(request, requestOptions = {}) {
    var _a, _b, _c, _d, _e, _f;
    await this._sendPromise;
    const newContent = formatNewContent(request);
    const generateContentRequest = {
      safetySettings: (_a = this.params) === null || _a === void 0 ? void 0 : _a.safetySettings,
      generationConfig: (_b = this.params) === null || _b === void 0 ? void 0 : _b.generationConfig,
      tools: (_c = this.params) === null || _c === void 0 ? void 0 : _c.tools,
      toolConfig: (_d = this.params) === null || _d === void 0 ? void 0 : _d.toolConfig,
      systemInstruction: (_e = this.params) === null || _e === void 0 ? void 0 : _e.systemInstruction,
      cachedContent: (_f = this.params) === null || _f === void 0 ? void 0 : _f.cachedContent,
      contents: [...this._history, newContent]
    };
    const chatSessionRequestOptions = Object.assign(Object.assign({}, this._requestOptions), requestOptions);
    let finalResult;
    this._sendPromise = this._sendPromise.then(() => generateContent(this._apiKey, this.model, generateContentRequest, chatSessionRequestOptions)).then((result) => {
      var _a2;
      if (isValidResponse(result.response)) {
        this._history.push(newContent);
        const responseContent = Object.assign({
          parts: [],
          // Response seems to come back without a role set.
          role: "model"
        }, (_a2 = result.response.candidates) === null || _a2 === void 0 ? void 0 : _a2[0].content);
        this._history.push(responseContent);
      } else {
        const blockErrorMessage = formatBlockErrorMessage(result.response);
        if (blockErrorMessage) {
          console.warn(`sendMessage() was unsuccessful. ${blockErrorMessage}. Inspect response object for details.`);
        }
      }
      finalResult = result;
    }).catch((e) => {
      this._sendPromise = Promise.resolve();
      throw e;
    });
    await this._sendPromise;
    return finalResult;
  }
  /**
   * Sends a chat message and receives the response as a
   * {@link GenerateContentStreamResult} containing an iterable stream
   * and a response promise.
   *
   * Fields set in the optional {@link SingleRequestOptions} parameter will
   * take precedence over the {@link RequestOptions} values provided to
   * {@link GoogleGenerativeAI.getGenerativeModel }.
   */
  async sendMessageStream(request, requestOptions = {}) {
    var _a, _b, _c, _d, _e, _f;
    await this._sendPromise;
    const newContent = formatNewContent(request);
    const generateContentRequest = {
      safetySettings: (_a = this.params) === null || _a === void 0 ? void 0 : _a.safetySettings,
      generationConfig: (_b = this.params) === null || _b === void 0 ? void 0 : _b.generationConfig,
      tools: (_c = this.params) === null || _c === void 0 ? void 0 : _c.tools,
      toolConfig: (_d = this.params) === null || _d === void 0 ? void 0 : _d.toolConfig,
      systemInstruction: (_e = this.params) === null || _e === void 0 ? void 0 : _e.systemInstruction,
      cachedContent: (_f = this.params) === null || _f === void 0 ? void 0 : _f.cachedContent,
      contents: [...this._history, newContent]
    };
    const chatSessionRequestOptions = Object.assign(Object.assign({}, this._requestOptions), requestOptions);
    const streamPromise = generateContentStream(this._apiKey, this.model, generateContentRequest, chatSessionRequestOptions);
    this._sendPromise = this._sendPromise.then(() => streamPromise).catch((_ignored) => {
      throw new Error(SILENT_ERROR);
    }).then((streamResult) => streamResult.response).then((response) => {
      if (isValidResponse(response)) {
        this._history.push(newContent);
        const responseContent = Object.assign({}, response.candidates[0].content);
        if (!responseContent.role) {
          responseContent.role = "model";
        }
        this._history.push(responseContent);
      } else {
        const blockErrorMessage = formatBlockErrorMessage(response);
        if (blockErrorMessage) {
          console.warn(`sendMessageStream() was unsuccessful. ${blockErrorMessage}. Inspect response object for details.`);
        }
      }
    }).catch((e) => {
      if (e.message !== SILENT_ERROR) {
        console.error(e);
      }
    });
    return streamPromise;
  }
};
async function countTokens(apiKey, model, params, singleRequestOptions) {
  const response = await makeModelRequest(model, Task.COUNT_TOKENS, apiKey, false, JSON.stringify(params), singleRequestOptions);
  return response.json();
}
async function embedContent(apiKey, model, params, requestOptions) {
  const response = await makeModelRequest(model, Task.EMBED_CONTENT, apiKey, false, JSON.stringify(params), requestOptions);
  return response.json();
}
async function batchEmbedContents(apiKey, model, params, requestOptions) {
  const requestsWithModel = params.requests.map((request) => {
    return Object.assign(Object.assign({}, request), { model });
  });
  const response = await makeModelRequest(model, Task.BATCH_EMBED_CONTENTS, apiKey, false, JSON.stringify({ requests: requestsWithModel }), requestOptions);
  return response.json();
}
var GenerativeModel = class {
  constructor(apiKey, modelParams, _requestOptions = {}) {
    this.apiKey = apiKey;
    this._requestOptions = _requestOptions;
    if (modelParams.model.includes("/")) {
      this.model = modelParams.model;
    } else {
      this.model = `models/${modelParams.model}`;
    }
    this.generationConfig = modelParams.generationConfig || {};
    this.safetySettings = modelParams.safetySettings || [];
    this.tools = modelParams.tools;
    this.toolConfig = modelParams.toolConfig;
    this.systemInstruction = formatSystemInstruction(modelParams.systemInstruction);
    this.cachedContent = modelParams.cachedContent;
  }
  /**
   * Makes a single non-streaming call to the model
   * and returns an object containing a single {@link GenerateContentResponse}.
   *
   * Fields set in the optional {@link SingleRequestOptions} parameter will
   * take precedence over the {@link RequestOptions} values provided to
   * {@link GoogleGenerativeAI.getGenerativeModel }.
   */
  async generateContent(request, requestOptions = {}) {
    var _a;
    const formattedParams = formatGenerateContentInput(request);
    const generativeModelRequestOptions = Object.assign(Object.assign({}, this._requestOptions), requestOptions);
    return generateContent(this.apiKey, this.model, Object.assign({ generationConfig: this.generationConfig, safetySettings: this.safetySettings, tools: this.tools, toolConfig: this.toolConfig, systemInstruction: this.systemInstruction, cachedContent: (_a = this.cachedContent) === null || _a === void 0 ? void 0 : _a.name }, formattedParams), generativeModelRequestOptions);
  }
  /**
   * Makes a single streaming call to the model and returns an object
   * containing an iterable stream that iterates over all chunks in the
   * streaming response as well as a promise that returns the final
   * aggregated response.
   *
   * Fields set in the optional {@link SingleRequestOptions} parameter will
   * take precedence over the {@link RequestOptions} values provided to
   * {@link GoogleGenerativeAI.getGenerativeModel }.
   */
  async generateContentStream(request, requestOptions = {}) {
    var _a;
    const formattedParams = formatGenerateContentInput(request);
    const generativeModelRequestOptions = Object.assign(Object.assign({}, this._requestOptions), requestOptions);
    return generateContentStream(this.apiKey, this.model, Object.assign({ generationConfig: this.generationConfig, safetySettings: this.safetySettings, tools: this.tools, toolConfig: this.toolConfig, systemInstruction: this.systemInstruction, cachedContent: (_a = this.cachedContent) === null || _a === void 0 ? void 0 : _a.name }, formattedParams), generativeModelRequestOptions);
  }
  /**
   * Gets a new {@link ChatSession} instance which can be used for
   * multi-turn chats.
   */
  startChat(startChatParams) {
    var _a;
    return new ChatSession(this.apiKey, this.model, Object.assign({ generationConfig: this.generationConfig, safetySettings: this.safetySettings, tools: this.tools, toolConfig: this.toolConfig, systemInstruction: this.systemInstruction, cachedContent: (_a = this.cachedContent) === null || _a === void 0 ? void 0 : _a.name }, startChatParams), this._requestOptions);
  }
  /**
   * Counts the tokens in the provided request.
   *
   * Fields set in the optional {@link SingleRequestOptions} parameter will
   * take precedence over the {@link RequestOptions} values provided to
   * {@link GoogleGenerativeAI.getGenerativeModel }.
   */
  async countTokens(request, requestOptions = {}) {
    const formattedParams = formatCountTokensInput(request, {
      model: this.model,
      generationConfig: this.generationConfig,
      safetySettings: this.safetySettings,
      tools: this.tools,
      toolConfig: this.toolConfig,
      systemInstruction: this.systemInstruction,
      cachedContent: this.cachedContent
    });
    const generativeModelRequestOptions = Object.assign(Object.assign({}, this._requestOptions), requestOptions);
    return countTokens(this.apiKey, this.model, formattedParams, generativeModelRequestOptions);
  }
  /**
   * Embeds the provided content.
   *
   * Fields set in the optional {@link SingleRequestOptions} parameter will
   * take precedence over the {@link RequestOptions} values provided to
   * {@link GoogleGenerativeAI.getGenerativeModel }.
   */
  async embedContent(request, requestOptions = {}) {
    const formattedParams = formatEmbedContentInput(request);
    const generativeModelRequestOptions = Object.assign(Object.assign({}, this._requestOptions), requestOptions);
    return embedContent(this.apiKey, this.model, formattedParams, generativeModelRequestOptions);
  }
  /**
   * Embeds an array of {@link EmbedContentRequest}s.
   *
   * Fields set in the optional {@link SingleRequestOptions} parameter will
   * take precedence over the {@link RequestOptions} values provided to
   * {@link GoogleGenerativeAI.getGenerativeModel }.
   */
  async batchEmbedContents(batchEmbedContentRequest, requestOptions = {}) {
    const generativeModelRequestOptions = Object.assign(Object.assign({}, this._requestOptions), requestOptions);
    return batchEmbedContents(this.apiKey, this.model, batchEmbedContentRequest, generativeModelRequestOptions);
  }
};
var GoogleGenerativeAI = class {
  constructor(apiKey) {
    this.apiKey = apiKey;
  }
  /**
   * Gets a {@link GenerativeModel} instance for the provided model name.
   */
  getGenerativeModel(modelParams, requestOptions) {
    if (!modelParams.model) {
      throw new GoogleGenerativeAIError(`Must provide a model name. Example: genai.getGenerativeModel({ model: 'my-model-name' })`);
    }
    return new GenerativeModel(this.apiKey, modelParams, requestOptions);
  }
  /**
   * Creates a {@link GenerativeModel} instance from provided content cache.
   */
  getGenerativeModelFromCachedContent(cachedContent, modelParams, requestOptions) {
    if (!cachedContent.name) {
      throw new GoogleGenerativeAIRequestInputError("Cached content must contain a `name` field.");
    }
    if (!cachedContent.model) {
      throw new GoogleGenerativeAIRequestInputError("Cached content must contain a `model` field.");
    }
    const disallowedDuplicates = ["model", "systemInstruction"];
    for (const key of disallowedDuplicates) {
      if ((modelParams === null || modelParams === void 0 ? void 0 : modelParams[key]) && cachedContent[key] && (modelParams === null || modelParams === void 0 ? void 0 : modelParams[key]) !== cachedContent[key]) {
        if (key === "model") {
          const modelParamsComp = modelParams.model.startsWith("models/") ? modelParams.model.replace("models/", "") : modelParams.model;
          const cachedContentComp = cachedContent.model.startsWith("models/") ? cachedContent.model.replace("models/", "") : cachedContent.model;
          if (modelParamsComp === cachedContentComp) {
            continue;
          }
        }
        throw new GoogleGenerativeAIRequestInputError(`Different value for "${key}" specified in modelParams (${modelParams[key]}) and cachedContent (${cachedContent[key]})`);
      }
    }
    const modelParamsFromCache = Object.assign(Object.assign({}, modelParams), { model: cachedContent.model, tools: cachedContent.tools, toolConfig: cachedContent.toolConfig, systemInstruction: cachedContent.systemInstruction, cachedContent });
    return new GenerativeModel(this.apiKey, modelParamsFromCache, requestOptions);
  }
};

// main.ts
var DEFAULT_SETTINGS = {
  geminiApiKey: "",
  model: "gemini-1.5-flash",
  customTranscriptionTypes: []
};
var AiNotes = class extends import_obsidian.Plugin {
  constructor() {
    super(...arguments);
    this.mediaRecorder = null;
    this.audioChunks = [];
    this.stream = null;
    this.currentTranscriptionTitle = null;
  }
  async onload() {
    await this.loadSettings();
    this.addRibbonIcon("microphone", "AI Notes", () => {
      new RecordingChoiceModal(this.app, this).open();
    });
    this.addCommand({
      id: "start-recording",
      name: "Start recording",
      callback: () => {
        new RecordingChoiceModal(this.app, this).open();
      }
    });
    this.addCommand({
      id: "upload-recording",
      name: "Upload recording",
      callback: () => {
        new RecordingChoiceModal(this.app, this).open();
      }
    });
    this.addSettingTab(new AiNotesSettingTab(this.app, this));
  }
  async loadSettings() {
    this.settings = Object.assign({}, DEFAULT_SETTINGS, await this.loadData());
  }
  async saveSettings() {
    await this.saveData(this.settings);
  }
  async generatePrompt(typeName) {
    const genAI = new GoogleGenerativeAI(this.settings.geminiApiKey);
    const model = genAI.getGenerativeModel({ model: this.settings.model });
    const prompt = `Generate a detailed prompt for a transcription service. The user wants to transcribe an audio and get a result of type '${typeName}'. The prompt should clearly instruct the AI on what to extract from the audio. For example, for a 'Meeting Summary' type, the prompt could be 'Transcribe the audio and provide a summary of the meeting, including key decisions and action items.'`;
    const result = await model.generateContent(prompt);
    return result.response.text();
  }
  async initRecording() {
    if (!this.settings.geminiApiKey) {
      new import_obsidian.Notice("Please set your Gemini API key in the settings.");
      return false;
    }
    try {
      this.stream = await navigator.mediaDevices.getUserMedia({ audio: true });
      this.mediaRecorder = new MediaRecorder(this.stream);
      this.audioChunks = [];
      this.mediaRecorder.addEventListener("dataavailable", (event) => {
        this.audioChunks.push(event.data);
      });
      this.mediaRecorder.addEventListener("stop", async () => {
        const audioBlob = new Blob(this.audioChunks, { type: "audio/webm" });
        new TranscriptionTypeModal(this.app, this, audioBlob).open();
      });
      return true;
    } catch (error) {
      new import_obsidian.Notice("Error initializing recording: " + error.message);
      return false;
    }
  }
  start() {
    if (this.mediaRecorder) {
      this.mediaRecorder.start();
    }
  }
  stopRecording() {
    if (this.mediaRecorder && this.mediaRecorder.state !== "inactive") {
      this.mediaRecorder.stop();
    }
    if (this.stream) {
      this.stream.getTracks().forEach((track) => track.stop());
      this.stream = null;
    }
  }
  async transcribe(audioBlob, prompt) {
    const genAI = new GoogleGenerativeAI(this.settings.geminiApiKey);
    const model = genAI.getGenerativeModel({ model: this.settings.model });
    const audioBase64 = await this.blobToBase64(audioBlob);
    const result = await model.generateContent([
      {
        inlineData: {
          mimeType: "audio/webm",
          data: audioBase64
        }
      },
      { text: prompt }
    ]);
    return result.response.text();
  }
  async transcribeAndSave(audioBlob, prompt) {
    var _a;
    const progress = new TranscriptionProgressModal(this.app, this);
    progress.open();
    progress.updateStatus("transcribing");
    try {
      const transcription = await this.transcribe(audioBlob, prompt);
      progress.updateStatus("saving");
      const folderPath = "transcriptions";
      const providedTitle = ((_a = this.currentTranscriptionTitle) != null ? _a : "").trim();
      const safeBase = providedTitle ? this.sanitizeFileName(providedTitle) : "";
      const baseName = safeBase && safeBase.length > 0 ? safeBase : `transcription-${Date.now()}`;
      const fileName = `${baseName}.md`;
      const filePath = `${folderPath}/${fileName}`;
      try {
        await this.app.vault.createFolder(folderPath);
      } catch (e) {
      }
      const content = transcription;
      await this.app.vault.create(filePath, content);
      this.currentTranscriptionTitle = null;
      progress.close();
      await this.app.workspace.openLinkText(filePath, "", false);
    } catch (error) {
      progress.updateStatus("error");
      new import_obsidian.Notice("Error during transcription: " + error.message);
      setTimeout(() => progress.close(), 1500);
    }
  }
  sanitizeFileName(name) {
    const replaced = name.replace(/[\\/:*?"<>|]/g, "-").replace(/\s+/g, " ").trim();
    return replaced.replace(/[ .]+$/g, "");
  }
  blobToBase64(blob) {
    return new Promise((resolve, reject) => {
      const reader = new FileReader();
      reader.onloadend = () => {
        const dataUrl = reader.result;
        const base64Data = dataUrl.split(",")[1];
        resolve(base64Data);
      };
      reader.onerror = reject;
      reader.readAsDataURL(blob);
    });
  }
};
var RecordingChoiceModal = class extends import_obsidian.Modal {
  constructor(app, plugin) {
    super(app);
    this.plugin = plugin;
    this.modalEl.addClass("recording-choice-modal");
  }
  onOpen() {
    var _a;
    const { contentEl } = this;
    contentEl.empty();
    const container = contentEl.createDiv("recording-choice-container");
    const titleEl = container.createEl("h2", { text: "AI Notes" });
    const subtitleEl = container.createEl("p", { text: "Choose an option to get started" });
    const titleWrapper = container.createDiv("title-input-container");
    const titleLabel = titleWrapper.createEl("label", { text: "Title (optional)", cls: "title-label" });
    const titleInput = titleWrapper.createEl("input");
    titleInput.setAttr("type", "text");
    titleInput.setAttr("placeholder", "e.g., Team Meeting with Alex");
    titleInput.classList.add("title-input");
    titleInput.value = (_a = this.plugin.currentTranscriptionTitle) != null ? _a : "";
    titleInput.addEventListener("input", (e) => {
      const val = e.target.value;
      this.plugin.currentTranscriptionTitle = val;
    });
    const recordButton = container.createEl("button", { text: "Start Recording", cls: "mod-cta" });
    recordButton.addEventListener("click", async () => {
      this.close();
      new RecordingModal(this.app, this.plugin).open();
    });
    const uploadButton = container.createEl("button", { text: "Upload Recording", cls: "mod-cta upload-button" });
    uploadButton.addEventListener("click", async () => {
      this.handleFileUpload();
    });
    const poweredBy = contentEl.createDiv("powered-by");
    poweredBy.setText("Powered by nivio.ai");
    this.addStyles();
    const modalContainer = this.modalEl.closest(".modal-container");
    if (modalContainer)
      modalContainer.classList.add("no-backdrop");
  }
  onClose() {
    const modalContainer = this.modalEl.closest(".modal-container");
    if (modalContainer)
      modalContainer.classList.remove("no-backdrop");
    const { contentEl } = this;
    contentEl.empty();
  }
  async handleFileUpload() {
    const input = document.createElement("input");
    input.type = "file";
    input.accept = "audio/*";
    input.style.display = "none";
    input.onchange = async (event) => {
      var _a;
      const file = (_a = event.target.files) == null ? void 0 : _a[0];
      if (file) {
        const arrayBuffer = await file.arrayBuffer();
        const audioBlob = new Blob([arrayBuffer], { type: file.type });
        this.close();
        new TranscriptionTypeModal(this.app, this.plugin, audioBlob).open();
      }
    };
    document.body.appendChild(input);
    input.click();
    document.body.removeChild(input);
  }
  addStyles() {
    const existing = document.getElementById("recording-choice-modal-styles");
    if (existing)
      return;
    const style = document.createElement("style");
    style.id = "recording-choice-modal-styles";
    style.innerHTML = `
			.recording-choice-modal .modal-content {
				display: flex;
				align-items: center;
				justify-content: center;
				padding: 0;
				background: transparent;
			}
            /* Remove dark background overlay only for the RecordingChoiceModal */
            .modal-container.no-backdrop .modal-bg { display: none !important; }
			.recording-choice-container {
				display: flex;
				flex-direction: column;
				align-items: stretch;
				gap: 14px;
				text-align: left;
				padding: 22px 24px;
				min-width: 360px;
				border: 1px solid var(--background-modifier-border);
				border-radius: 12px;
				background: color-mix(in oklab, var(--background-primary) 85%, transparent);
				backdrop-filter: blur(6px);
				box-shadow: 0 6px 18px rgba(0,0,0,0.18);
			}
			.recording-choice-container h2 {
				color: var(--text-normal);
				margin: 0;
				font-size: 1.15rem;
				font-weight: 600;
			}
			.recording-choice-container p {
				color: var(--text-muted);
				margin: 0 0 6px;
			}
			/* Title input */
			.title-input-container { display: flex; flex-direction: column; gap: 6px; margin: 6px 0 10px; }
			.title-input-container .title-label { color: var(--text-muted); font-size: 0.85rem; }
			.title-input-container .title-input {
				width: 100%;
				padding: 8px 10px;
				border-radius: 8px;
				border: 1px solid var(--background-modifier-border);
				background: var(--background-primary);
				color: var(--text-normal);
				outline: none;
			}
			.title-input-container .title-input:focus { border-color: var(--interactive-accent); box-shadow: 0 0 0 3px color-mix(in oklab, var(--interactive-accent) 25%, transparent); }
			/* Buttons */
			.recording-choice-modal .mod-cta {
				background-color: var(--interactive-accent);
				color: var(--text-on-accent);
				border: none;
				padding: 10px 14px;
				border-radius: 8px;
				font-size: 0.95rem;
				cursor: pointer;
				transition: background-color 0.2s, transform 0.06s ease;
				width: 100%;
			}
			.recording-choice-modal .mod-cta:hover { background-color: var(--interactive-accent-hover); }
			.recording-choice-modal .mod-cta:active { transform: translateY(1px); }
			.recording-choice-modal .upload-button {
				background-color: color-mix(in oklab, var(--background-modifier-border) 90%, transparent);
				color: var(--text-normal);
			}
			.recording-choice-modal .upload-button:hover { background-color: var(--background-modifier-border-hover); }
			.powered-by {
				position: absolute;
				bottom: 10px;
				right: 12px;
				font-size: 0.7em;
				color: var(--text-muted);
			}
		`;
    document.head.appendChild(style);
  }
  removeStyles() {
    const style = document.getElementById("recording-choice-modal-styles");
    if (style) {
      style.remove();
    }
  }
};
var RecordingModal = class extends import_obsidian.Modal {
  constructor(app, plugin) {
    super(app);
    this.audioContext = null;
    this.analyser = null;
    this.source = null;
    this.animationFrameId = null;
    this.timerIntervalId = null;
    this.seconds = 0;
    this.plugin = plugin;
    this.modalEl.addClass("recording-modal");
  }
  onOpen() {
    const { contentEl } = this;
    contentEl.empty();
    const container = contentEl.createDiv("start-recording-container");
    const titleEl = container.createEl("h2", { text: "Ready to Record?" });
    const microphoneIcon = container.createDiv("microphone-icon");
    microphoneIcon.innerHTML = `
			<svg xmlns="http://www.w3.org/2000/svg" width="48" height="48" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="lucide lucide-mic">
				<path d="M12 2a3 3 0 0 0-3 3v7a3 3 0 0 0 6 0V5a3 3 0 0 0-3-3Z"/>
				<path d="M19 10v2a7 7 0 0 1-14 0v-2"/>
				<line x1="12" x2="12" y1="19" y2="22"/>
			</svg>
		`;
    const startButton = container.createEl("button", { text: "Start Recording", cls: "mod-cta" });
    startButton.addEventListener("click", async () => {
      const success = await this.plugin.initRecording();
      if (success) {
        this.plugin.start();
        this.showRecordingUI();
      } else {
        this.close();
      }
    });
    const poweredBy = contentEl.createDiv("powered-by");
    poweredBy.setText("Powered by nivio.ai");
    this.addStyles();
    const modalContainer = this.modalEl.closest(".modal-container");
    if (modalContainer)
      modalContainer.classList.add("no-backdrop");
  }
  async showRecordingUI() {
    try {
      const { contentEl } = this;
      contentEl.empty();
      const canvas = contentEl.createEl("canvas");
      canvas.width = 400;
      canvas.height = 150;
      const canvasCtx = canvas.getContext("2d");
      if (!canvasCtx)
        return;
      const timerEl = contentEl.createEl("p", { text: "00:00", cls: "timer" });
      this.seconds = 0;
      this.timerIntervalId = window.setInterval(() => {
        this.seconds++;
        const minutes = Math.floor(this.seconds / 60).toString().padStart(2, "0");
        const seconds = (this.seconds % 60).toString().padStart(2, "0");
        timerEl.setText(`${minutes}:${seconds}`);
      }, 1e3);
      this.audioContext = new AudioContext();
      if (!this.plugin.stream)
        return;
      this.source = this.audioContext.createMediaStreamSource(this.plugin.stream);
      this.analyser = this.audioContext.createAnalyser();
      this.source.connect(this.analyser);
      this.analyser.fftSize = 2048;
      const bufferLength = this.analyser.frequencyBinCount;
      const dataArray = new Uint8Array(bufferLength);
      const draw = () => {
        if (!this.analyser)
          return;
        this.animationFrameId = requestAnimationFrame(draw);
        this.analyser.getByteTimeDomainData(dataArray);
        canvasCtx.fillStyle = getComputedStyle(document.body).getPropertyValue("--background-secondary");
        canvasCtx.fillRect(0, 0, canvas.width, canvas.height);
        canvasCtx.lineWidth = 2;
        canvasCtx.strokeStyle = getComputedStyle(document.body).getPropertyValue("--text-accent");
        canvasCtx.beginPath();
        const sliceWidth = canvas.width * 1 / bufferLength;
        let x = 0;
        for (let i = 0; i < bufferLength; i++) {
          const v = dataArray[i] / 128;
          const y = v * canvas.height / 2;
          if (i === 0) {
            canvasCtx.moveTo(x, y);
          } else {
            canvasCtx.lineTo(x, y);
          }
          x += sliceWidth;
        }
        canvasCtx.lineTo(canvas.width, canvas.height / 2);
        canvasCtx.stroke();
      };
      draw();
      const stopButton = contentEl.createEl("button", { text: "Stop Recording", cls: "mod-cta" });
      stopButton.addEventListener("click", () => {
        this.plugin.stopRecording();
        if (this.animationFrameId) {
          cancelAnimationFrame(this.animationFrameId);
        }
        if (this.timerIntervalId) {
          window.clearInterval(this.timerIntervalId);
        }
        this.close();
      });
      const poweredBy = contentEl.createDiv("powered-by");
      poweredBy.setText("Powered by nivio.ai");
      this.addStyles();
    } catch (error) {
      new import_obsidian.Notice("Error showing recording UI: " + error.message);
      this.close();
    }
  }
  onClose() {
    const { contentEl } = this;
    contentEl.empty();
    this.removeStyles();
    const modalContainer = this.modalEl.closest(".modal-container");
    if (modalContainer)
      modalContainer.classList.remove("no-backdrop");
    if (this.animationFrameId) {
      cancelAnimationFrame(this.animationFrameId);
    }
    if (this.audioContext) {
      this.audioContext.close();
    }
    if (this.timerIntervalId) {
      window.clearInterval(this.timerIntervalId);
    }
  }
  addStyles() {
    const style = document.createElement("style");
    style.id = "recording-modal-styles";
    style.innerHTML = `
			/* Hide backdrop when container has no-backdrop (used by recording modal as well) */
			.modal-container.no-backdrop .modal-bg { display: none !important; }
			.recording-modal .modal-content {
				display: flex;
				flex-direction: column;
				align-items: center;
				justify-content: center;
				padding: 2em;
				background-color: var(--background-primary);
			}
			.start-recording-container {
				display: flex;
				flex-direction: column;
				align-items: center;
				justify-content: center;
				text-align: center;
			}
			.start-recording-container h2 {
				color: var(--text-normal);
				margin-bottom: 1em;
			}
			.microphone-icon {
				color: var(--text-accent);
				margin-bottom: 1.5em;
			}
			.recording-modal .mod-cta {
				background-color: var(--interactive-accent);
				color: var(--text-on-accent);
				border: none;
				padding: 10px 20px;
				border-radius: 5px;
				font-size: 1.2em;
				cursor: pointer;
				transition: background-color 0.3s;
			}
			.recording-modal .mod-cta:hover {
				background-color: var(--interactive-accent-hover);
			}
			.recording-modal canvas {
				margin-bottom: 1.5em;
				border-radius: 8px;
			}
			.timer {
				font-size: 1.5em;
				font-weight: 500;
				margin-bottom: 1em;
				color: var(--text-normal);
			}
			.powered-by {
				position: absolute;
				bottom: 10px;
				right: 10px;
				font-size: 0.7em;
				color: var(--text-muted);
			}
		`;
    document.head.appendChild(style);
  }
  removeStyles() {
    const style = document.getElementById("recording-modal-styles");
    if (style) {
      style.remove();
    }
  }
};
var GeneratingModal = class extends import_obsidian.Modal {
  constructor(app) {
    super(app);
  }
  onOpen() {
    const { contentEl } = this;
    contentEl.setText("Generating...");
  }
  onClose() {
    const { contentEl } = this;
    contentEl.empty();
  }
};
var TranscriptionProgressModal = class extends import_obsidian.Modal {
  constructor(app, plugin) {
    super(app);
    this.status = "transcribing";
    this.plugin = plugin;
    this.modalEl.addClass("transcription-progress-modal");
  }
  onOpen() {
    const { contentEl } = this;
    contentEl.empty();
    this.updateContent();
  }
  updateContent() {
    const { contentEl } = this;
    contentEl.empty();
    const container = contentEl.createDiv("transcription-progress-container");
    const icon = container.createDiv("tp-icon");
    icon.innerHTML = `
            <svg xmlns="http://www.w3.org/2000/svg" width="28" height="28" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
                <path d="M12 2a3 3 0 0 0-3 3v7a3 3 0 0 0 6 0V5a3 3 0 0 0-3-3Z"/>
                <path d="M19 10v2a7 7 0 0 1-14 0v-2"/>
                <line x1="12" x2="12" y1="19" y2="22"/>
            </svg>`;
    const titleEl = container.createEl("h2", { text: "Transcription in Progress" });
    const statusEl = container.createEl("p", { text: this.getStatusText(), cls: "status-text" });
    const spinner = container.createDiv("spinner");
    const poweredBy = contentEl.createDiv("powered-by");
    poweredBy.setText("Powered by nivio.ai");
    this.addStyles();
  }
  getStatusText() {
    switch (this.status) {
      case "transcribing":
        return "Transcribing your audio...";
      case "saving":
        return "Saving transcription...";
      case "completed":
        return "Completed!";
      case "error":
        return "An error occurred";
      default:
        return "Processing...";
    }
  }
  updateStatus(status) {
    this.status = status;
    this.updateContent();
  }
  addStyles() {
    const existing = document.getElementById("transcription-progress-modal-styles");
    if (existing) {
      return;
    }
    const style = document.createElement("style");
    style.id = "transcription-progress-modal-styles";
    style.innerHTML = `
            /* Hide backdrop when container has no-backdrop (used by choice & progress modals) */
            .modal-container.no-backdrop .modal-bg { display: none !important; }
            .transcription-progress-modal .modal-content {
                display: flex;
                align-items: center;
                justify-content: center;
                padding: 0;
                background: transparent;
            }
            .transcription-progress-container {
                display: flex;
                flex-direction: column;
                align-items: center;
                gap: 12px;
                text-align: center;
                padding: 24px 28px;
                min-width: 320px;
                border: 1px solid var(--background-modifier-border);
                border-radius: 12px;
                background: color-mix(in oklab, var(--background-primary) 85%, transparent);
                backdrop-filter: blur(6px);
                box-shadow: 0 6px 18px rgba(0,0,0,0.18);
            }
            .transcription-progress-container .tp-icon svg {
                color: var(--text-accent);
            }
            .transcription-progress-container h2 {
                color: var(--text-normal);
                font-size: 1.1rem;
                margin: 2px 0 4px;
                font-weight: 600;
            }
            .status-text {
                color: var(--text-muted);
                margin: 0 0 8px;
                font-size: 0.95rem;
            }
            .spinner {
                width: 44px;
                height: 44px;
                border-radius: 50%;
                background:
                    conic-gradient(from 0deg, var(--interactive-accent) 0deg, transparent 300deg) content-box,
                    conic-gradient(from 0deg, var(--background-modifier-border) 0deg, transparent 300deg);
                -webkit-mask: radial-gradient(farthest-side, transparent 58%, #000 60%);
                mask: radial-gradient(farthest-side, transparent 58%, #000 60%);
                animation: spin 1s linear infinite;
                margin: 6px 0 2px;
            }
            @keyframes spin { 0% { transform: rotate(0deg); } 100% { transform: rotate(360deg); } }
            .powered-by {
                position: absolute;
                bottom: 10px;
                right: 12px;
                font-size: 0.7em;
                color: var(--text-muted);
            }
        `;
    document.head.appendChild(style);
  }
  removeStyles() {
    const style = document.getElementById("transcription-progress-modal-styles");
    if (style) {
      style.remove();
    }
  }
};
var TranscriptionTypeModal = class extends import_obsidian.Modal {
  constructor(app, plugin, audioBlob) {
    super(app);
    this.plugin = plugin;
    this.audioBlob = audioBlob;
    this.modalEl.addClass("transcription-type-modal");
  }
  onOpen() {
    const { contentEl } = this;
    contentEl.empty();
    contentEl.createEl("h2", { text: "Select Transcription Type" });
    const defaultTypes = [
      { name: "Simple", description: "A plain transcription of the audio.", prompt: "Transcribe the audio." },
      { name: "Standard", description: "Transcription with key takeaways and a summary.", prompt: "Transcribe the audio. Also, extract key takeaways and a summary." },
      { name: "Detailed", description: "Transcription with takeaways, summary, action items, and questions.", prompt: "Transcribe the audio. Also, extract key takeaways, a summary, action items, and a list of questions asked." }
    ];
    defaultTypes.forEach((type) => {
      new import_obsidian.Setting(contentEl).setName(type.name).setDesc(type.description).addButton((button) => button.setButtonText("Select").onClick(() => {
        this.plugin.transcribeAndSave(this.audioBlob, type.prompt);
        this.close();
      }));
    });
    this.plugin.settings.customTranscriptionTypes.forEach((type) => {
      new import_obsidian.Setting(contentEl).setName(type.name).setDesc(type.description).addButton((button) => button.setButtonText("Select").onClick(() => {
        this.plugin.transcribeAndSave(this.audioBlob, type.prompt);
        this.close();
      }));
    });
    const poweredBy = contentEl.createDiv("powered-by");
    poweredBy.setText("Powered by nivio.ai");
    this.addStyles();
  }
  onClose() {
    const { contentEl } = this;
    contentEl.empty();
    this.removeStyles();
  }
  addStyles() {
    const style = document.createElement("style");
    style.id = "transcription-type-modal-styles";
    style.innerHTML = `
			.transcription-type-modal .modal-content {
				position: relative;
				background-color: var(--background-primary);
				padding-bottom: 30px;
			}
			.powered-by {
				position: absolute;
				bottom: 10px;
				right: 10px;
				font-size: 0.7em;
				color: var(--text-muted);
			}
		`;
    document.head.appendChild(style);
  }
  removeStyles() {
    const style = document.getElementById("transcription-type-modal-styles");
    if (style) {
      style.remove();
    }
  }
};
var AiNotesSettingTab = class extends import_obsidian.PluginSettingTab {
  constructor(app, plugin) {
    super(app, plugin);
    this.plugin = plugin;
  }
  display() {
    const { containerEl } = this;
    containerEl.empty();
    new import_obsidian.Setting(containerEl).setName("Gemini API Key").setDesc("Enter your Gemini API key").addText((text) => text.setPlaceholder("Enter your API key").setValue(this.plugin.settings.geminiApiKey).onChange(async (value) => {
      this.plugin.settings.geminiApiKey = value;
      await this.plugin.saveSettings();
    }));
    new import_obsidian.Setting(containerEl).setName("Model").setDesc("Select the model to use for transcription").addDropdown((dropdown) => dropdown.addOption("gemini-1.5-flash", "Gemini 1.5 Flash").addOption("gemini-1.5-pro", "Gemini 1.5 Pro").addOption("gemini-2.5-flash", "Gemini 2.5 Flash").addOption("gemini-2.5-pro", "Gemini 2.5 Pro").setValue(this.plugin.settings.model).onChange(async (value) => {
      this.plugin.settings.model = value;
      await this.plugin.saveSettings();
    }));
    new import_obsidian.Setting(containerEl).setName("Custom Transcription Types").setDesc("Create your own transcription types with custom prompts.").setHeading();
    this.plugin.settings.customTranscriptionTypes.forEach((type, index) => {
      const typeContainer = containerEl.createDiv("custom-type-container");
      new import_obsidian.Setting(typeContainer).setName(`Type ${index + 1}`).setHeading();
      new import_obsidian.Setting(typeContainer).setName("Name").addText((text) => text.setPlaceholder("e.g., Meeting Summary").setValue(type.name).onChange(async (value) => {
        this.plugin.settings.customTranscriptionTypes[index].name = value;
        await this.plugin.saveSettings();
      }));
      new import_obsidian.Setting(typeContainer).setName("Description").addTextArea((text) => {
        text.setPlaceholder("Enter a short description of this transcription type...").setValue(type.description).onChange(async (value) => {
          this.plugin.settings.customTranscriptionTypes[index].description = value;
          await this.plugin.saveSettings();
        });
        text.inputEl.setAttr("rows", 3);
      });
      const promptSetting = new import_obsidian.Setting(typeContainer).setName("Prompt").addTextArea((text) => {
        text.setPlaceholder("Enter your custom prompt here...").setValue(type.prompt).onChange(async (value) => {
          this.plugin.settings.customTranscriptionTypes[index].prompt = value;
          await this.plugin.saveSettings();
        });
        text.inputEl.setAttr("rows", 10);
      });
      const buttonContainer = typeContainer.createDiv({ cls: "button-container" });
      buttonContainer.createEl("button", { text: "Generate with AI" }).addEventListener("click", async () => {
        const generatingModal = new GeneratingModal(this.app);
        generatingModal.open();
        try {
          const generatedPrompt = await this.plugin.generatePrompt(type.name);
          this.plugin.settings.customTranscriptionTypes[index].prompt = generatedPrompt;
          await this.plugin.saveSettings();
          this.display();
        } catch (error) {
          new import_obsidian.Notice("Error generating prompt: " + error.message);
        } finally {
          generatingModal.close();
        }
      });
      buttonContainer.createEl("button", { text: "Delete" }).addEventListener("click", async () => {
        this.plugin.settings.customTranscriptionTypes.splice(index, 1);
        await this.plugin.saveSettings();
        this.display();
      });
    });
    new import_obsidian.Setting(containerEl).addButton((button) => button.setButtonText("Add New Type").onClick(async () => {
      this.plugin.settings.customTranscriptionTypes.push({ name: "", description: "", prompt: "" });
      await this.plugin.saveSettings();
      this.display();
    }));
    this.addStyles();
  }
  addStyles() {
    const style = document.createElement("style");
    style.id = "custom-transcription-styles";
    style.innerHTML = `
			.custom-type-container {
				border: 1px solid var(--background-modifier-border);
				border-radius: 8px;
				padding: 1em;
				margin-bottom: 1em;
			}
			.custom-type-container .setting-item {
				display: flex;
				align-items: flex-start;
			}
			.custom-type-container .setting-item-info {
				width: 20%;
			}
			.custom-type-container .setting-item-control {
				width: 80%;
			}
			.custom-type-container .setting-item-control textarea {
				width: 100%;
			}
			.custom-type-container .setting-item-control input[type="text"] {
				width: 100%;
			}
			.button-container {
				display: flex;
				justify-content: space-between;
				margin-top: 0.5em;
			}
		`;
    document.head.appendChild(style);
  }
  removeStyles() {
    const style = document.getElementById("custom-transcription-styles");
    if (style) {
      style.remove();
    }
  }
};
/*! Bundled license information:

@google/generative-ai/dist/index.mjs:
  (**
   * @license
   * Copyright 2024 Google LLC
   *
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   *   http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   *)

@google/generative-ai/dist/index.mjs:
  (**
   * @license
   * Copyright 2024 Google LLC
   *
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   *   http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   *)
*/
//# sourceMappingURL=data:application/json;base64,
